# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cmio', [dirname(__file__)])
        except ImportError:
            import _cmio
            return _cmio
        if fp is not None:
            try:
                _mod = imp.load_module('_cmio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cmio = swig_import_helper()
    del swig_import_helper
else:
    import _cmio
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Vector3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_cmio.Vector3_x_get, _cmio.Vector3_x_set)
    y = _swig_property(_cmio.Vector3_y_get, _cmio.Vector3_y_set)
    z = _swig_property(_cmio.Vector3_z_get, _cmio.Vector3_z_set)

    def __init__(self, *args):
        this = _cmio.new_Vector3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __add__(self, v):
        return _cmio.Vector3___add__(self, v)

    def __iadd__(self, v):
        return _cmio.Vector3___iadd__(self, v)

    def __sub__(self, v):
        return _cmio.Vector3___sub__(self, v)

    def __isub__(self, v):
        return _cmio.Vector3___isub__(self, v)

    def __eq__(self, v):
        return _cmio.Vector3___eq__(self, v)

    def __mul__(self, f):
        return _cmio.Vector3___mul__(self, f)

    def __imul__(self, f):
        return _cmio.Vector3___imul__(self, f)

    def __div__(self, f):
        return _cmio.Vector3___div__(self, f)

    def __idiv__(self, f):
        return _cmio.Vector3___idiv__(self, f)

    def __neg__(self):
        return _cmio.Vector3___neg__(self)

    def __ne__(self, other):
        return _cmio.Vector3___ne__(self, other)

    def fill_array_3(self, a):
        return _cmio.Vector3_fill_array_3(self, a)

    def fill_array_4(self, a):
        return _cmio.Vector3_fill_array_4(self, a)

    def length_squared(self):
        return _cmio.Vector3_length_squared(self)

    def length(self):
        return _cmio.Vector3_length(self)

    def __copy__(self):
        return _cmio.Vector3___copy__(self)

    def __deepcopy__(self):
        return _cmio.Vector3___deepcopy__(self)

    def is_near(self, *args):
        return _cmio.Vector3_is_near(self, *args)

    def __getitem__(self, position):
        return _cmio.Vector3___getitem__(self, position)

    def __setitem__(self, position, value):
        return _cmio.Vector3___setitem__(self, position, value)
    def accept(self, visitor):
    	visitor.visit_Vector3(self)
    	
    def __repr__(self):
    	return "Vector3<%f, %f, %f>" % (self.x, self.y, self.z)

    __swig_destroy__ = _cmio.delete_Vector3
    __del__ = lambda self: None
Vector3_swigregister = _cmio.Vector3_swigregister
Vector3_swigregister(Vector3)


def absdot(v1, v2):
    return _cmio.absdot(v1, v2)
absdot = _cmio.absdot

def cross(v1, v2):
    return _cmio.cross(v1, v2)
cross = _cmio.cross

def coordinate_system(v1, v2, v3):
    return _cmio.coordinate_system(v1, v2, v3)
coordinate_system = _cmio.coordinate_system

def spherical_direction(*args):
    return _cmio.spherical_direction(*args)
spherical_direction = _cmio.spherical_direction

def spherical_theta(v):
    return _cmio.spherical_theta(v)
spherical_theta = _cmio.spherical_theta

def spherical_phi(v):
    return _cmio.spherical_phi(v)
spherical_phi = _cmio.spherical_phi
class Point3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_cmio.Point3_x_get, _cmio.Point3_x_set)
    y = _swig_property(_cmio.Point3_y_get, _cmio.Point3_y_set)
    z = _swig_property(_cmio.Point3_z_get, _cmio.Point3_z_set)

    def __init__(self, *args):
        this = _cmio.new_Point3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __sub__(self, *args):
        return _cmio.Point3___sub__(self, *args)

    def __isub__(self, v):
        return _cmio.Point3___isub__(self, v)

    def __iadd__(self, *args):
        return _cmio.Point3___iadd__(self, *args)

    def __add__(self, *args):
        return _cmio.Point3___add__(self, *args)

    def __mul__(self, f):
        return _cmio.Point3___mul__(self, f)

    def __imul__(self, f):
        return _cmio.Point3___imul__(self, f)

    def __div__(self, f):
        return _cmio.Point3___div__(self, f)

    def __idiv__(self, f):
        return _cmio.Point3___idiv__(self, f)

    def __eq__(self, other):
        return _cmio.Point3___eq__(self, other)

    def __ne__(self, other):
        return _cmio.Point3___ne__(self, other)

    def fill_array_3(self, a):
        return _cmio.Point3_fill_array_3(self, a)

    def fill_array_4(self, a):
        return _cmio.Point3_fill_array_4(self, a)

    def __copy__(self):
        return _cmio.Point3___copy__(self)

    def __deepcopy__(self):
        return _cmio.Point3___deepcopy__(self)

    def is_near(self, *args):
        return _cmio.Point3_is_near(self, *args)

    def __getitem__(self, position):
        return _cmio.Point3___getitem__(self, position)

    def __setitem__(self, position, value):
        return _cmio.Point3___setitem__(self, position, value)
    def accept(self, visitor):
    	visitor.visit_Point3(self)
    	
    def __repr__(self):
    	return "Point3<%f, %f, %f>" % (self.x, self.y, self.z)

    __swig_destroy__ = _cmio.delete_Point3
    __del__ = lambda self: None
Point3_swigregister = _cmio.Point3_swigregister
Point3_swigregister(Point3)


def distance(p1, p2):
    return _cmio.distance(p1, p2)
distance = _cmio.distance

def distance_squared(p1, p2):
    return _cmio.distance_squared(p1, p2)
distance_squared = _cmio.distance_squared
class Ray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Ray(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __call__(self, t):
        return _cmio.Ray___call__(self, t)
    origin = _swig_property(_cmio.Ray_origin_get, _cmio.Ray_origin_set)
    direction = _swig_property(_cmio.Ray_direction_get, _cmio.Ray_direction_set)
    def accept(self, visitor):
    	visitor.visit_Ray(self)

    __swig_destroy__ = _cmio.delete_Ray
    __del__ = lambda self: None
Ray_swigregister = _cmio.Ray_swigregister
Ray_swigregister(Ray)

class Box(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Box(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def overlaps(self, b):
        return _cmio.Box_overlaps(self, b)

    def inside(self, pt):
        return _cmio.Box_inside(self, pt)

    def expand(self, delta):
        return _cmio.Box_expand(self, delta)

    def volume(self):
        return _cmio.Box_volume(self)

    def surface_area(self):
        return _cmio.Box_surface_area(self)

    def diameter(self):
        return _cmio.Box_diameter(self)

    def centroid(self):
        return _cmio.Box_centroid(self)

    def maximum_extent(self):
        return _cmio.Box_maximum_extent(self)

    def bounding_sphere(self, c, rad):
        return _cmio.Box_bounding_sphere(self, c, rad)

    def intersect_predicate(self, ray, hitt0=None, hitt1=None):
        return _cmio.Box_intersect_predicate(self, ray, hitt0, hitt1)
    min_point = _swig_property(_cmio.Box_min_point_get, _cmio.Box_min_point_set)
    max_point = _swig_property(_cmio.Box_max_point_get, _cmio.Box_max_point_set)
    def accept(self, visitor):
    	visitor.visit_Box(self)	

    __swig_destroy__ = _cmio.delete_Box
    __del__ = lambda self: None
Box_swigregister = _cmio.Box_swigregister
Box_swigregister(Box)


def union_(*args):
    return _cmio.union_(*args)
union_ = _cmio.union_

def __lshift__(*args):
    return _cmio.__lshift__(*args)
__lshift__ = _cmio.__lshift__
class Matrix4x4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Matrix4x4(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _get(self, i, j):
        return _cmio.Matrix4x4__get(self, i, j)

    def _set(self, i, j, value):
        return _cmio.Matrix4x4__set(self, i, j, value)

    def __mul__(self, *args):
        return _cmio.Matrix4x4___mul__(self, *args)

    def get_column_major_array(self, result):
        return _cmio.Matrix4x4_get_column_major_array(self, result)

    def __copy__(self):
        return _cmio.Matrix4x4___copy__(self)

    def __deepcopy__(self):
        return _cmio.Matrix4x4___deepcopy__(self)

    def is_near(self, *args):
        return _cmio.Matrix4x4_is_near(self, *args)
    identity = staticmethod(_cmio.Matrix4x4_identity)
    translate = staticmethod(_cmio.Matrix4x4_translate)
    translate_x = staticmethod(_cmio.Matrix4x4_translate_x)
    translate_y = staticmethod(_cmio.Matrix4x4_translate_y)
    translate_z = staticmethod(_cmio.Matrix4x4_translate_z)
    scale = staticmethod(_cmio.Matrix4x4_scale)
    scale_x = staticmethod(_cmio.Matrix4x4_scale_x)
    scale_y = staticmethod(_cmio.Matrix4x4_scale_y)
    scale_z = staticmethod(_cmio.Matrix4x4_scale_z)
    rotate = staticmethod(_cmio.Matrix4x4_rotate)
    rotate_x = staticmethod(_cmio.Matrix4x4_rotate_x)
    rotate_y = staticmethod(_cmio.Matrix4x4_rotate_y)
    rotate_z = staticmethod(_cmio.Matrix4x4_rotate_z)
    look_at = staticmethod(_cmio.Matrix4x4_look_at)

    def __getitem__(self, key):
        return _cmio.Matrix4x4___getitem__(self, key)

    def __setitem__(self, key, value):
        return _cmio.Matrix4x4___setitem__(self, key, value)
    def accept(self, visitor):
    	visitor.visit_Matrix4x4(self)

    __swig_destroy__ = _cmio.delete_Matrix4x4
    __del__ = lambda self: None
Matrix4x4_swigregister = _cmio.Matrix4x4_swigregister
Matrix4x4_swigregister(Matrix4x4)

def Matrix4x4_identity():
    return _cmio.Matrix4x4_identity()
Matrix4x4_identity = _cmio.Matrix4x4_identity

def Matrix4x4_translate(x, y, z):
    return _cmio.Matrix4x4_translate(x, y, z)
Matrix4x4_translate = _cmio.Matrix4x4_translate

def Matrix4x4_translate_x(x):
    return _cmio.Matrix4x4_translate_x(x)
Matrix4x4_translate_x = _cmio.Matrix4x4_translate_x

def Matrix4x4_translate_y(y):
    return _cmio.Matrix4x4_translate_y(y)
Matrix4x4_translate_y = _cmio.Matrix4x4_translate_y

def Matrix4x4_translate_z(z):
    return _cmio.Matrix4x4_translate_z(z)
Matrix4x4_translate_z = _cmio.Matrix4x4_translate_z

def Matrix4x4_scale(*args):
    return _cmio.Matrix4x4_scale(*args)
Matrix4x4_scale = _cmio.Matrix4x4_scale

def Matrix4x4_scale_x(x):
    return _cmio.Matrix4x4_scale_x(x)
Matrix4x4_scale_x = _cmio.Matrix4x4_scale_x

def Matrix4x4_scale_y(y):
    return _cmio.Matrix4x4_scale_y(y)
Matrix4x4_scale_y = _cmio.Matrix4x4_scale_y

def Matrix4x4_scale_z(z):
    return _cmio.Matrix4x4_scale_z(z)
Matrix4x4_scale_z = _cmio.Matrix4x4_scale_z

def Matrix4x4_rotate(degrees, axis):
    return _cmio.Matrix4x4_rotate(degrees, axis)
Matrix4x4_rotate = _cmio.Matrix4x4_rotate

def Matrix4x4_rotate_x(degrees):
    return _cmio.Matrix4x4_rotate_x(degrees)
Matrix4x4_rotate_x = _cmio.Matrix4x4_rotate_x

def Matrix4x4_rotate_y(degrees):
    return _cmio.Matrix4x4_rotate_y(degrees)
Matrix4x4_rotate_y = _cmio.Matrix4x4_rotate_y

def Matrix4x4_rotate_z(degrees):
    return _cmio.Matrix4x4_rotate_z(degrees)
Matrix4x4_rotate_z = _cmio.Matrix4x4_rotate_z

def Matrix4x4_look_at(eye, at, up):
    return _cmio.Matrix4x4_look_at(eye, at, up)
Matrix4x4_look_at = _cmio.Matrix4x4_look_at


def transpose(A):
    return _cmio.transpose(A)
transpose = _cmio.transpose

def det(m):
    return _cmio.det(m)
det = _cmio.det
class Transform(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m = _swig_property(_cmio.Transform_m_get, _cmio.Transform_m_set)
    mi = _swig_property(_cmio.Transform_mi_get, _cmio.Transform_mi_set)
    mit = _swig_property(_cmio.Transform_mit_get, _cmio.Transform_mit_set)

    def __init__(self, *args):
        this = _cmio.new_Transform(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __mul__(self, other):
        return _cmio.Transform___mul__(self, other)

    def __imul__(self, other):
        return _cmio.Transform___imul__(self, other)
    identity = staticmethod(_cmio.Transform_identity)
    translate = staticmethod(_cmio.Transform_translate)
    translate_x = staticmethod(_cmio.Transform_translate_x)
    translate_y = staticmethod(_cmio.Transform_translate_y)
    translate_z = staticmethod(_cmio.Transform_translate_z)
    scale = staticmethod(_cmio.Transform_scale)
    scale_x = staticmethod(_cmio.Transform_scale_x)
    scale_y = staticmethod(_cmio.Transform_scale_y)
    scale_z = staticmethod(_cmio.Transform_scale_z)
    rotate = staticmethod(_cmio.Transform_rotate)
    rotate_x = staticmethod(_cmio.Transform_rotate_x)
    rotate_y = staticmethod(_cmio.Transform_rotate_y)
    rotate_z = staticmethod(_cmio.Transform_rotate_z)
    def accept(self, visitor):
    	visitor.visit_Transform(self)

    __swig_destroy__ = _cmio.delete_Transform
    __del__ = lambda self: None
Transform_swigregister = _cmio.Transform_swigregister
Transform_swigregister(Transform)

def Transform_identity():
    return _cmio.Transform_identity()
Transform_identity = _cmio.Transform_identity

def Transform_translate(x, y, z):
    return _cmio.Transform_translate(x, y, z)
Transform_translate = _cmio.Transform_translate

def Transform_translate_x(x):
    return _cmio.Transform_translate_x(x)
Transform_translate_x = _cmio.Transform_translate_x

def Transform_translate_y(y):
    return _cmio.Transform_translate_y(y)
Transform_translate_y = _cmio.Transform_translate_y

def Transform_translate_z(z):
    return _cmio.Transform_translate_z(z)
Transform_translate_z = _cmio.Transform_translate_z

def Transform_scale(*args):
    return _cmio.Transform_scale(*args)
Transform_scale = _cmio.Transform_scale

def Transform_scale_x(x):
    return _cmio.Transform_scale_x(x)
Transform_scale_x = _cmio.Transform_scale_x

def Transform_scale_y(y):
    return _cmio.Transform_scale_y(y)
Transform_scale_y = _cmio.Transform_scale_y

def Transform_scale_z(z):
    return _cmio.Transform_scale_z(z)
Transform_scale_z = _cmio.Transform_scale_z

def Transform_rotate(degrees, axis):
    return _cmio.Transform_rotate(degrees, axis)
Transform_rotate = _cmio.Transform_rotate

def Transform_rotate_x(degrees):
    return _cmio.Transform_rotate_x(degrees)
Transform_rotate_x = _cmio.Transform_rotate_x

def Transform_rotate_y(degrees):
    return _cmio.Transform_rotate_y(degrees)
Transform_rotate_y = _cmio.Transform_rotate_y

def Transform_rotate_z(degrees):
    return _cmio.Transform_rotate_z(degrees)
Transform_rotate_z = _cmio.Transform_rotate_z

class Quaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_cmio.Quaternion_x_get, _cmio.Quaternion_x_set)
    y = _swig_property(_cmio.Quaternion_y_get, _cmio.Quaternion_y_set)
    z = _swig_property(_cmio.Quaternion_z_get, _cmio.Quaternion_z_set)
    w = _swig_property(_cmio.Quaternion_w_get, _cmio.Quaternion_w_set)

    def __init__(self, *args):
        this = _cmio.new_Quaternion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __add__(self, other):
        return _cmio.Quaternion___add__(self, other)

    def __iadd__(self, other):
        return _cmio.Quaternion___iadd__(self, other)

    def __sub__(self, other):
        return _cmio.Quaternion___sub__(self, other)

    def __isub__(self, other):
        return _cmio.Quaternion___isub__(self, other)

    def __mul__(self, *args):
        return _cmio.Quaternion___mul__(self, *args)

    def __imul__(self, c):
        return _cmio.Quaternion___imul__(self, c)

    def get_matrix(self):
        return _cmio.Quaternion_get_matrix(self)

    def __copy__(self):
        return _cmio.Quaternion___copy__(self)

    def __deepcopy__(self):
        return _cmio.Quaternion___deepcopy__(self)

    def is_near(self, *args):
        return _cmio.Quaternion_is_near(self, *args)

    def rotate(self, *args):
        return _cmio.Quaternion_rotate(self, *args)
    def accept(self, visitor):
    	visitor.visit_Quaternion(self)
    	
    def __repr__(self):
    	return "Quaternion<%f, %f, %f, %f>" % (self.x, self.y, self.z, self.w)

    __swig_destroy__ = _cmio.delete_Quaternion
    __del__ = lambda self: None
Quaternion_swigregister = _cmio.Quaternion_swigregister
Quaternion_swigregister(Quaternion)


def conjugate(q):
    return _cmio.conjugate(q)
conjugate = _cmio.conjugate

def norm(q):
    return _cmio.norm(q)
norm = _cmio.norm

def norm_squared(q):
    return _cmio.norm_squared(q)
norm_squared = _cmio.norm_squared

def normalize(*args):
    return _cmio.normalize(*args)
normalize = _cmio.normalize

def inverse(*args):
    return _cmio.inverse(*args)
inverse = _cmio.inverse

def dot(*args):
    return _cmio.dot(*args)
dot = _cmio.dot

def slerp(a, b, x):
    return _cmio.slerp(a, b, x)
slerp = _cmio.slerp
class Rgb(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    r = _swig_property(_cmio.Rgb_r_get, _cmio.Rgb_r_set)
    g = _swig_property(_cmio.Rgb_g_get, _cmio.Rgb_g_set)
    b = _swig_property(_cmio.Rgb_b_get, _cmio.Rgb_b_set)

    def __init__(self, *args):
        this = _cmio.new_Rgb(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __sub__(self, other):
        return _cmio.Rgb___sub__(self, other)

    def __add__(self, *args):
        return _cmio.Rgb___add__(self, *args)

    def __iadd__(self, other):
        return _cmio.Rgb___iadd__(self, other)

    def __mul__(self, *args):
        return _cmio.Rgb___mul__(self, *args)

    def __imul__(self, other):
        return _cmio.Rgb___imul__(self, other)

    def __div__(self, *args):
        return _cmio.Rgb___div__(self, *args)

    def __copy__(self):
        return _cmio.Rgb___copy__(self)

    def __deepcopy__(self):
        return _cmio.Rgb___deepcopy__(self)

    def is_near(self, *args):
        return _cmio.Rgb_is_near(self, *args)

    def __getitem__(self, position):
        return _cmio.Rgb___getitem__(self, position)

    def __setitem__(self, position, value):
        return _cmio.Rgb___setitem__(self, position, value)
    def accept(self, visitor):
    	visitor.visit_Rgb(self)

    __swig_destroy__ = _cmio.delete_Rgb
    __del__ = lambda self: None
Rgb_swigregister = _cmio.Rgb_swigregister
Rgb_swigregister(Rgb)

class Rgba(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    r = _swig_property(_cmio.Rgba_r_get, _cmio.Rgba_r_set)
    g = _swig_property(_cmio.Rgba_g_get, _cmio.Rgba_g_set)
    b = _swig_property(_cmio.Rgba_b_get, _cmio.Rgba_b_set)
    a = _swig_property(_cmio.Rgba_a_get, _cmio.Rgba_a_set)

    def __init__(self, *args):
        this = _cmio.new_Rgba(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __sub__(self, other):
        return _cmio.Rgba___sub__(self, other)

    def __add__(self, *args):
        return _cmio.Rgba___add__(self, *args)

    def __iadd__(self, other):
        return _cmio.Rgba___iadd__(self, other)

    def __mul__(self, *args):
        return _cmio.Rgba___mul__(self, *args)

    def __imul__(self, other):
        return _cmio.Rgba___imul__(self, other)

    def __div__(self, *args):
        return _cmio.Rgba___div__(self, *args)

    def fill_array_4(self, _a):
        return _cmio.Rgba_fill_array_4(self, _a)

    def get_pointer(self):
        return _cmio.Rgba_get_pointer(self)

    def __copy__(self):
        return _cmio.Rgba___copy__(self)

    def __deepcopy__(self):
        return _cmio.Rgba___deepcopy__(self)

    def is_near(self, *args):
        return _cmio.Rgba_is_near(self, *args)

    def __getitem__(self, position):
        return _cmio.Rgba___getitem__(self, position)

    def __setitem__(self, position, value):
        return _cmio.Rgba___setitem__(self, position, value)
    def accept(self, visitor):
    	visitor.visit_Rgba(self)

    __swig_destroy__ = _cmio.delete_Rgba
    __del__ = lambda self: None
Rgba_swigregister = _cmio.Rgba_swigregister
Rgba_swigregister(Rgba)


def __add__(*args):
    return _cmio.__add__(*args)
__add__ = _cmio.__add__

def __mul__(*args):
    return _cmio.__mul__(*args)
__mul__ = _cmio.__mul__
class Int3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Int3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _get(self, i):
        return _cmio.Int3__get(self, i)

    def _set(self, i, value):
        return _cmio.Int3__set(self, i, value)

    def __getitem__(self, position):
        return _cmio.Int3___getitem__(self, position)

    def __setitem__(self, position, value):
        return _cmio.Int3___setitem__(self, position, value)
    def accept(self, visitor):
    	visitor.visit_Int3(self)

    __swig_destroy__ = _cmio.delete_Int3
    __del__ = lambda self: None
Int3_swigregister = _cmio.Int3_swigregister
Int3_swigregister(Int3)

class Uv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    u = _swig_property(_cmio.Uv_u_get, _cmio.Uv_u_set)
    v = _swig_property(_cmio.Uv_v_get, _cmio.Uv_v_set)

    def __init__(self, *args):
        this = _cmio.new_Uv(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other):
        return _cmio.Uv___eq__(self, other)
    def accept(self, visitor):
    	visitor.visit_Uv(self)

    __swig_destroy__ = _cmio.delete_Uv
    __del__ = lambda self: None
Uv_swigregister = _cmio.Uv_swigregister
Uv_swigregister(Uv)

class ReferenceCounted(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_ReferenceCounted()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_ReferenceCounted
    __del__ = lambda self: None

    def inc_ref(self):
        return _cmio.ReferenceCounted_inc_ref(self)

    def dec_ref(self):
        return _cmio.ReferenceCounted_dec_ref(self)

    def get_ref_count(self):
        return _cmio.ReferenceCounted_get_ref_count(self)
ReferenceCounted_swigregister = _cmio.ReferenceCounted_swigregister
ReferenceCounted_swigregister(ReferenceCounted)

class MioObject(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_MioObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_MioObject
    __del__ = lambda self: None

    def get_uid(self):
        return _cmio.MioObject_get_uid(self)

    def set_uid(self, uid):
        return _cmio.MioObject_set_uid(self, uid)
MioObject_swigregister = _cmio.MioObject_swigregister
MioObject_swigregister(MioObject)

class Mesh(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Mesh
    __del__ = lambda self: None

    def get_bounding_box(self):
        return _cmio.Mesh_get_bounding_box(self)

    def _get_vertex(self, index):
        return _cmio.Mesh__get_vertex(self, index)

    def get_vertex(self, index):
        return _cmio.Mesh_get_vertex(self, index)

    def _get_normal(self, index):
        return _cmio.Mesh__get_normal(self, index)

    def get_normal(self, index):
        return _cmio.Mesh_get_normal(self, index)

    def get_polygon_count(self):
        return _cmio.Mesh_get_polygon_count(self)

    def _get_polygon_vertex_count(self, polygon_index):
        return _cmio.Mesh__get_polygon_vertex_count(self, polygon_index)

    def get_polygon_vertex_count(self, polygon_index):
        return _cmio.Mesh_get_polygon_vertex_count(self, polygon_index)

    def _get_polygon_vertex(self, polygon_index, vertex_offset):
        return _cmio.Mesh__get_polygon_vertex(self, polygon_index, vertex_offset)

    def get_polygon_vertex(self, polygon_index, vertex_offset):
        return _cmio.Mesh_get_polygon_vertex(self, polygon_index, vertex_offset)

    def _get_polygon_normal(self, polygon_index, vertex_offset):
        return _cmio.Mesh__get_polygon_normal(self, polygon_index, vertex_offset)

    def get_polygon_normal(self, polygon_index, vertex_offset):
        return _cmio.Mesh_get_polygon_normal(self, polygon_index, vertex_offset)

    def get_vertex_count(self):
        return _cmio.Mesh_get_vertex_count(self)

    def get_normal_count(self):
        return _cmio.Mesh_get_normal_count(self)

    def accept(self, visitor):
        return _cmio.Mesh_accept(self, visitor)
    def vertices(self):
    	for i in xrange(self.get_vertex_count()):
    		yield self.get_vertex(i)
    		
    def normals(self):
    	for i in xrange(self.get_normal_count()):
    		yield self.get_normal(i)

Mesh_swigregister = _cmio.Mesh_swigregister
Mesh_swigregister(Mesh)

class IndexedMesh(Mesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IndexedMesh(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IndexedMesh
    __del__ = lambda self: None

    def accept(self, visitor):
        return _cmio.IndexedMesh_accept(self, visitor)

    def get_bounding_box(self):
        return _cmio.IndexedMesh_get_bounding_box(self)

    def validate_bounding_box(self):
        return _cmio.IndexedMesh_validate_bounding_box(self)

    def invalidate_bounding_box(self):
        return _cmio.IndexedMesh_invalidate_bounding_box(self)

    def _get_vertex(self, index):
        return _cmio.IndexedMesh__get_vertex(self, index)

    def _get_normal(self, index):
        return _cmio.IndexedMesh__get_normal(self, index)

    def get_vertex_count(self):
        return _cmio.IndexedMesh_get_vertex_count(self)

    def get_normal_count(self):
        return _cmio.IndexedMesh_get_normal_count(self)

    def append_vertex(self, vertex):
        return _cmio.IndexedMesh_append_vertex(self, vertex)

    def append_normal(self, normal):
        return _cmio.IndexedMesh_append_normal(self, normal)

    def _set_normal(self, normalIndex, normal):
        return _cmio.IndexedMesh__set_normal(self, normalIndex, normal)

    def set_normal(self, normalIndex, normal):
        return _cmio.IndexedMesh_set_normal(self, normalIndex, normal)

    def _set_vertex(self, vertex_index, position):
        return _cmio.IndexedMesh__set_vertex(self, vertex_index, position)

    def set_vertex(self, vertex_index, position):
        return _cmio.IndexedMesh_set_vertex(self, vertex_index, position)

    def append_new_polygon(self):
        return _cmio.IndexedMesh_append_new_polygon(self)

    def append_vertex_normal_index_to_last_polygon(self, vertex_index, normal_index):
        return _cmio.IndexedMesh_append_vertex_normal_index_to_last_polygon(self, vertex_index, normal_index)

    def get_polygon_count(self):
        return _cmio.IndexedMesh_get_polygon_count(self)

    def _get_polygon_vertex_count(self, polygon_index):
        return _cmio.IndexedMesh__get_polygon_vertex_count(self, polygon_index)

    def _get_polygon_vertex(self, polygon_index, vertex_offset):
        return _cmio.IndexedMesh__get_polygon_vertex(self, polygon_index, vertex_offset)

    def _get_polygon_normal(self, polygon_index, vertex_offset):
        return _cmio.IndexedMesh__get_polygon_normal(self, polygon_index, vertex_offset)

    def _get_polygon_vertex_index(self, polygon_index, vertex_offset):
        return _cmio.IndexedMesh__get_polygon_vertex_index(self, polygon_index, vertex_offset)

    def get_polygon_vertex_index(self, polygon_index, vertex_offset):
        return _cmio.IndexedMesh_get_polygon_vertex_index(self, polygon_index, vertex_offset)

    def _get_polygon_normal_index(self, polygon_index, vertex_offset):
        return _cmio.IndexedMesh__get_polygon_normal_index(self, polygon_index, vertex_offset)

    def get_polygon_normal_index(self, polygon_index, vertex_offset):
        return _cmio.IndexedMesh_get_polygon_normal_index(self, polygon_index, vertex_offset)

    def __copy__(self):
        return _cmio.IndexedMesh___copy__(self)
IndexedMesh_swigregister = _cmio.IndexedMesh_swigregister
IndexedMesh_swigregister(IndexedMesh)

class GLTexture(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_GLTexture()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_GLTexture
    __del__ = lambda self: None

    def bind(self):
        return _cmio.GLTexture_bind(self)

    def download(self, _components, width, height, _format, _type, data):
        return _cmio.GLTexture_download(self, _components, width, height, _format, _type, data)

    def build_mipmap(self, _components, width, height, _format, _type, data):
        return _cmio.GLTexture_build_mipmap(self, _components, width, height, _format, _type, data)
    def accept(self, visitor):
    	visitor.visit_GLTexture(self)

GLTexture_swigregister = _cmio.GLTexture_swigregister
GLTexture_swigregister(GLTexture)

class ILImage(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _fileName):
        this = _cmio.new_ILImage(_fileName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_ILImage
    __del__ = lambda self: None

    def get_file_name(self):
        return _cmio.ILImage_get_file_name(self)

    def build_mipmap(self):
        return _cmio.ILImage_build_mipmap(self)

    def bind(self):
        return _cmio.ILImage_bind(self)

    def get_texture(self):
        return _cmio.ILImage_get_texture(self)

    def get_image_id(self):
        return _cmio.ILImage_get_image_id(self)
    def accept(self, visitor):
    	visitor.visit_ILImage(self)

ILImage_swigregister = _cmio.ILImage_swigregister
ILImage_swigregister(ILImage)

class ILImageService(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_ILImageService
    __del__ = lambda self: None

    def get_image(self, *args):
        return _cmio.ILImageService_get_image(self, *args)

    def has_image_with_file_name(self, filename):
        return _cmio.ILImageService_has_image_with_file_name(self, filename)

    def has_image_with_id(self, id):
        return _cmio.ILImageService_has_image_with_id(self, id)

    def remove(self, *args):
        return _cmio.ILImageService_remove(self, *args)
    v = staticmethod(_cmio.ILImageService_v)
    init = staticmethod(_cmio.ILImageService_init)
ILImageService_swigregister = _cmio.ILImageService_swigregister
ILImageService_swigregister(ILImageService)

def ILImageService_v():
    return _cmio.ILImageService_v()
ILImageService_v = _cmio.ILImageService_v

def ILImageService_init():
    return _cmio.ILImageService_init()
ILImageService_init = _cmio.ILImageService_init

class Texture(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Texture(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Texture
    __del__ = lambda self: None

    def accept(self, visitor):
        return _cmio.Texture_accept(self, visitor)
Texture_swigregister = _cmio.Texture_swigregister
Texture_swigregister(Texture)

class TextureMapping(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_TextureMapping
    __del__ = lambda self: None

    def get_polygon_count(self):
        return _cmio.TextureMapping_get_polygon_count(self)

    def _get_polygon_vertex_count(self, polygon_index):
        return _cmio.TextureMapping__get_polygon_vertex_count(self, polygon_index)

    def get_polygon_vertex_count(self, polygon_index):
        return _cmio.TextureMapping_get_polygon_vertex_count(self, polygon_index)

    def _get_polygon_tex_coord(self, polygon_index, vertex_offset):
        return _cmio.TextureMapping__get_polygon_tex_coord(self, polygon_index, vertex_offset)

    def get_polygon_tex_coord(self, polygon_index, vertex_offset):
        return _cmio.TextureMapping_get_polygon_tex_coord(self, polygon_index, vertex_offset)

    def accept(self, visitor):
        return _cmio.TextureMapping_accept(self, visitor)
TextureMapping_swigregister = _cmio.TextureMapping_swigregister
TextureMapping_swigregister(TextureMapping)

class IndexedTextureMapping(TextureMapping):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IndexedTextureMapping(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IndexedTextureMapping
    __del__ = lambda self: None

    def _get_tex_coord(self, texCoordIndex):
        return _cmio.IndexedTextureMapping__get_tex_coord(self, texCoordIndex)

    def get_tex_coord(self, texCoordIndex):
        return _cmio.IndexedTextureMapping_get_tex_coord(self, texCoordIndex)

    def append_tex_coord(self, uv):
        return _cmio.IndexedTextureMapping_append_tex_coord(self, uv)

    def get_tex_coord_count(self):
        return _cmio.IndexedTextureMapping_get_tex_coord_count(self)

    def get_polygon_count(self):
        return _cmio.IndexedTextureMapping_get_polygon_count(self)

    def _get_polygon_vertex_count(self, polygon_index):
        return _cmio.IndexedTextureMapping__get_polygon_vertex_count(self, polygon_index)

    def _get_polygon_tex_coord(self, polygon_index, vertex_offset):
        return _cmio.IndexedTextureMapping__get_polygon_tex_coord(self, polygon_index, vertex_offset)

    def _get_polygon_tex_coord_index(self, polygon_index, vertex_offset):
        return _cmio.IndexedTextureMapping__get_polygon_tex_coord_index(self, polygon_index, vertex_offset)

    def get_polygon_tex_coord_index(self, polygon_index, vertex_offset):
        return _cmio.IndexedTextureMapping_get_polygon_tex_coord_index(self, polygon_index, vertex_offset)

    def append_new_polgon(self):
        return _cmio.IndexedTextureMapping_append_new_polgon(self)

    def append_tex_coord_index_to_last_polygon(self, tex_coord_index):
        return _cmio.IndexedTextureMapping_append_tex_coord_index_to_last_polygon(self, tex_coord_index)

    def accept(self, visitor):
        return _cmio.IndexedTextureMapping_accept(self, visitor)
    def tex_coords(self):
    	for i in xrange(self.get_tex_coord_count()):
    		yield self.get_tex_coord(i)

    def triangle_tex_coord_indices(self):
    	for i in xrange(self.get_mapping_count()):
    		yield self.get_triangle_tex_coord_indices(i)

IndexedTextureMapping_swigregister = _cmio.IndexedTextureMapping_swigregister
IndexedTextureMapping_swigregister(IndexedTextureMapping)

class ILTexture(Texture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_ILTexture(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_ILTexture
    __del__ = lambda self: None

    def get_image(self):
        return _cmio.ILTexture_get_image(self)

    def accept(self, visitor):
        return _cmio.ILTexture_accept(self, visitor)
ILTexture_swigregister = _cmio.ILTexture_swigregister
ILTexture_swigregister(ILTexture)

class LazyILTexture(Texture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_LazyILTexture(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_LazyILTexture
    __del__ = lambda self: None

    def get_il_texture(self):
        return _cmio.LazyILTexture_get_il_texture(self)

    def accept(self, visitor):
        return _cmio.LazyILTexture_accept(self, visitor)
LazyILTexture_swigregister = _cmio.LazyILTexture_swigregister
LazyILTexture_swigregister(LazyILTexture)

class Material(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Material
    __del__ = lambda self: None

    def accept(self, visitor):
        return _cmio.Material_accept(self, visitor)
Material_swigregister = _cmio.Material_swigregister
Material_swigregister(Material)

class MaterialList(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_MaterialList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_MaterialList
    __del__ = lambda self: None

    def append_material(self, material):
        return _cmio.MaterialList_append_material(self, material)

    def get_material_count(self):
        return _cmio.MaterialList_get_material_count(self)

    def _get_material(self, materialIndex):
        return _cmio.MaterialList__get_material(self, materialIndex)

    def get_material(self, index):
        return _cmio.MaterialList_get_material(self, index)
    def accept(self, visitor):
    	visitor.visit_MaterialList(self)
    	
    def materials(self):
    	for i in xrange(self.get_material_count()):
    		yield self.get_material(i)

MaterialList_swigregister = _cmio.MaterialList_swigregister
MaterialList_swigregister(MaterialList)

class MaterialMapping(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_MaterialMapping
    __del__ = lambda self: None

    def _get_material(self, polygon_index):
        return _cmio.MaterialMapping__get_material(self, polygon_index)

    def get_material(self, polygon_index):
        return _cmio.MaterialMapping_get_material(self, polygon_index)

    def get_polygon_count(self):
        return _cmio.MaterialMapping_get_polygon_count(self)

    def accept(self, visitor):
        return _cmio.MaterialMapping_accept(self, visitor)
    def mappings(self):
    	for i in xrange(self.get_mapping_count()):
    		yield self.get_mapping(i)

MaterialMapping_swigregister = _cmio.MaterialMapping_swigregister
MaterialMapping_swigregister(MaterialMapping)

class MqoMaterial(Material):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(_cmio.MqoMaterial_color_get, _cmio.MqoMaterial_color_set)
    ambient = _swig_property(_cmio.MqoMaterial_ambient_get, _cmio.MqoMaterial_ambient_set)
    diffuse = _swig_property(_cmio.MqoMaterial_diffuse_get, _cmio.MqoMaterial_diffuse_set)
    specular = _swig_property(_cmio.MqoMaterial_specular_get, _cmio.MqoMaterial_specular_set)
    emission = _swig_property(_cmio.MqoMaterial_emission_get, _cmio.MqoMaterial_emission_set)
    power = _swig_property(_cmio.MqoMaterial_power_get, _cmio.MqoMaterial_power_set)

    def __init__(self, *args):
        this = _cmio.new_MqoMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_MqoMaterial
    __del__ = lambda self: None

    def accept(self, visitor):
        return _cmio.MqoMaterial_accept(self, visitor)
MqoMaterial_swigregister = _cmio.MqoMaterial_swigregister
MqoMaterial_swigregister(MqoMaterial)

class PhongMaterial(Material):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ambient = _swig_property(_cmio.PhongMaterial_ambient_get, _cmio.PhongMaterial_ambient_set)
    diffuse = _swig_property(_cmio.PhongMaterial_diffuse_get, _cmio.PhongMaterial_diffuse_set)
    specular = _swig_property(_cmio.PhongMaterial_specular_get, _cmio.PhongMaterial_specular_set)
    emission = _swig_property(_cmio.PhongMaterial_emission_get, _cmio.PhongMaterial_emission_set)
    shininess = _swig_property(_cmio.PhongMaterial_shininess_get, _cmio.PhongMaterial_shininess_set)

    def __init__(self, *args):
        this = _cmio.new_PhongMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PhongMaterial
    __del__ = lambda self: None

    def accept(self, visitor):
        return _cmio.PhongMaterial_accept(self, visitor)
PhongMaterial_swigregister = _cmio.PhongMaterial_swigregister
PhongMaterial_swigregister(PhongMaterial)

class TexturedMqoMaterial(MqoMaterial):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_TexturedMqoMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_TexturedMqoMaterial
    __del__ = lambda self: None

    def get_texture(self):
        return _cmio.TexturedMqoMaterial_get_texture(self)

    def set_texture(self, texture):
        return _cmio.TexturedMqoMaterial_set_texture(self, texture)

    def accept(self, visitor):
        return _cmio.TexturedMqoMaterial_accept(self, visitor)
TexturedMqoMaterial_swigregister = _cmio.TexturedMqoMaterial_swigregister
TexturedMqoMaterial_swigregister(TexturedMqoMaterial)

class TexturedPhongMaterial(PhongMaterial):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_TexturedPhongMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_TexturedPhongMaterial
    __del__ = lambda self: None

    def get_texture(self):
        return _cmio.TexturedPhongMaterial_get_texture(self)

    def set_texture(self, texture):
        return _cmio.TexturedPhongMaterial_set_texture(self, texture)

    def accept(self, visitor):
        return _cmio.TexturedPhongMaterial_accept(self, visitor)
TexturedPhongMaterial_swigregister = _cmio.TexturedPhongMaterial_swigregister
TexturedPhongMaterial_swigregister(TexturedPhongMaterial)

class ByPolygonMaterialMapping(MaterialMapping):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_ByPolygonMaterialMapping(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_ByPolygonMaterialMapping
    __del__ = lambda self: None

    def _get_material(self, triangleIndex):
        return _cmio.ByPolygonMaterialMapping__get_material(self, triangleIndex)

    def append_mapping(self, mapping):
        return _cmio.ByPolygonMaterialMapping_append_mapping(self, mapping)

    def get_polygon_count(self):
        return _cmio.ByPolygonMaterialMapping_get_polygon_count(self)

    def accept(self, visitor):
        return _cmio.ByPolygonMaterialMapping_accept(self, visitor)
ByPolygonMaterialMapping_swigregister = _cmio.ByPolygonMaterialMapping_swigregister
ByPolygonMaterialMapping_swigregister(ByPolygonMaterialMapping)

class JointChange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    position = _swig_property(_cmio.JointChange_position_get, _cmio.JointChange_position_set)
    orientation = _swig_property(_cmio.JointChange_orientation_get, _cmio.JointChange_orientation_set)

    def __init__(self, *args):
        this = _cmio.new_JointChange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __copy__(self):
        return _cmio.JointChange___copy__(self)

    def is_near(self, other, threshold=0.0001):
        return _cmio.JointChange_is_near(self, other, threshold)
    __swig_destroy__ = _cmio.delete_JointChange
    __del__ = lambda self: None
JointChange_swigregister = _cmio.JointChange_swigregister
JointChange_swigregister(JointChange)

class Joint(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    index = _swig_property(_cmio.Joint_index_get, _cmio.Joint_index_set)
    parent_index = _swig_property(_cmio.Joint_parent_index_get, _cmio.Joint_parent_index_set)
    position = _swig_property(_cmio.Joint_position_get, _cmio.Joint_position_set)
    orientation = _swig_property(_cmio.Joint_orientation_get, _cmio.Joint_orientation_set)

    def __init__(self, *args):
        this = _cmio.new_Joint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Joint
    __del__ = lambda self: None

    def get_name(self):
        return _cmio.Joint_get_name(self)

    def get_translation_matrix(self):
        return _cmio.Joint_get_translation_matrix(self)

    def get_translation_transform(self):
        return _cmio.Joint_get_translation_transform(self)

    def get_rotation_matrix(self):
        return _cmio.Joint_get_rotation_matrix(self)

    def get_rotation_transform(self):
        return _cmio.Joint_get_rotation_transform(self)

    def apply_joint_change(self, joint_change):
        return _cmio.Joint_apply_joint_change(self, joint_change)

    def get_joint_change(self, other):
        return _cmio.Joint_get_joint_change(self, other)
Joint_swigregister = _cmio.Joint_swigregister
Joint_swigregister(Joint)

class NameJointChangePair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name, joint_change):
        this = _cmio.new_NameJointChangePair(name, joint_change)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_name(self):
        return _cmio.NameJointChangePair_get_name(self)

    def get_joint_change(self):
        return _cmio.NameJointChangePair_get_joint_change(self)
    __swig_destroy__ = _cmio.delete_NameJointChangePair
    __del__ = lambda self: None
NameJointChangePair_swigregister = _cmio.NameJointChangePair_swigregister
NameJointChangePair_swigregister(NameJointChangePair)

class Pose(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Pose(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Pose
    __del__ = lambda self: None

    def has_joint_change_of(self, name):
        return _cmio.Pose_has_joint_change_of(self, name)

    def get_joint_change(self, name):
        return _cmio.Pose_get_joint_change(self, name)

    def set_joint_change(self, name, joint_change):
        return _cmio.Pose_set_joint_change(self, name, joint_change)

    def clear(self):
        return _cmio.Pose_clear(self)

    def get_iterator(self):
        return _cmio.Pose_get_iterator(self)
    def get_name_joint_change_pairs(self):
    	return self.get_iterator()

Pose_swigregister = _cmio.Pose_swigregister
Pose_swigregister(Pose)

class NameJointChangePairIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_NameJointChangePairIterator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_NameJointChangePairIterator
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.NameJointChangePairIterator_has_next(self)

    def get_next(self):
        return _cmio.NameJointChangePairIterator_get_next(self)
    def __iter__(self):
    	return self

    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

NameJointChangePairIterator_swigregister = _cmio.NameJointChangePairIterator_swigregister
NameJointChangePairIterator_swigregister(NameJointChangePairIterator)

class Armature(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Armature(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Armature
    __del__ = lambda self: None

    def append_joint(self, joint):
        return _cmio.Armature_append_joint(self, joint)

    def _get_joint(self, index):
        return _cmio.Armature__get_joint(self, index)

    def _set_joint_parameter(self, index, position, orientation):
        return _cmio.Armature__set_joint_parameter(self, index, position, orientation)

    def set_joint_parameter(self, *args):
        return _cmio.Armature_set_joint_parameter(self, *args)

    def get_joint(self, *args):
        return _cmio.Armature_get_joint(self, *args)

    def get_joint_count(self):
        return _cmio.Armature_get_joint_count(self)

    def _set_parent(self, child_index, parent_index):
        return _cmio.Armature__set_parent(self, child_index, parent_index)

    def set_parent(self, *args):
        return _cmio.Armature_set_parent(self, *args)

    def _get_joint_world_position(self, joint_index):
        return _cmio.Armature__get_joint_world_position(self, joint_index)

    def _get_joint_world_orientation(self, joint_index):
        return _cmio.Armature__get_joint_world_orientation(self, joint_index)

    def get_joint_world_position(self, *args):
        return _cmio.Armature_get_joint_world_position(self, *args)

    def get_joint_world_orientation(self, *args):
        return _cmio.Armature_get_joint_world_orientation(self, *args)

    def _get_joint_to_world_matrix(self, joint_index):
        return _cmio.Armature__get_joint_to_world_matrix(self, joint_index)

    def get_joint_to_world_matrix(self, *args):
        return _cmio.Armature_get_joint_to_world_matrix(self, *args)

    def _get_joint_to_world_transform(self, joint_index):
        return _cmio.Armature__get_joint_to_world_transform(self, joint_index)

    def get_joint_to_world_transform(self, *args):
        return _cmio.Armature_get_joint_to_world_transform(self, *args)

    def get_pose(self, *args):
        return _cmio.Armature_get_pose(self, *args)

    def morph(self, result, pose):
        return _cmio.Armature_morph(self, result, pose)

    def __copy__(self):
        return _cmio.Armature___copy__(self)

    def __deepcopy__(self):
        return _cmio.Armature___deepcopy__(self)

    def get_joint_iterator(self):
        return _cmio.Armature_get_joint_iterator(self)
    def get_joints(self):
    	return self.get_joint_iterator()

Armature_swigregister = _cmio.Armature_swigregister
Armature_swigregister(Armature)

class JointIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_JointIterator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_JointIterator
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.JointIterator_has_next(self)

    def get_next(self):
        return _cmio.JointIterator_get_next(self)
    def __iter__(self):
    	return self

    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

JointIterator_swigregister = _cmio.JointIterator_swigregister
JointIterator_swigregister(JointIterator)


_cmio.X_ROTATE_swigconstant(_cmio)
X_ROTATE = _cmio.X_ROTATE

_cmio.Y_ROTATE_swigconstant(_cmio)
Y_ROTATE = _cmio.Y_ROTATE

_cmio.Z_ROTATE_swigconstant(_cmio)
Z_ROTATE = _cmio.Z_ROTATE

_cmio.X_TRANSLATE_swigconstant(_cmio)
X_TRANSLATE = _cmio.X_TRANSLATE

_cmio.Y_TRANSLATE_swigconstant(_cmio)
Y_TRANSLATE = _cmio.Y_TRANSLATE

_cmio.Z_TRANSLATE_swigconstant(_cmio)
Z_TRANSLATE = _cmio.Z_TRANSLATE

_cmio.IK_JOINT_PARAMETER_COUNT_swigconstant(_cmio)
IK_JOINT_PARAMETER_COUNT = _cmio.IK_JOINT_PARAMETER_COUNT
class IKJointParameters(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_IKJointParameters()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __getitem__(self, position):
        return _cmio.IKJointParameters___getitem__(self, position)

    def __setitem__(self, position, value):
        return _cmio.IKJointParameters___setitem__(self, position, value)

    def is_near(self, other, threshold=0.0001):
        return _cmio.IKJointParameters_is_near(self, other, threshold)

    def __copy__(self):
        return _cmio.IKJointParameters___copy__(self)

    def __deepcopy__(self):
        return _cmio.IKJointParameters___deepcopy__(self)
    X_ROTATE = 0
    Y_ROTATE = 1
    Z_ROTATE = 2
    X_TRANSLATE = 3
    Y_TRANSLATE = 4
    Z_TRANSLATE = 5

    __swig_destroy__ = _cmio.delete_IKJointParameters
    __del__ = lambda self: None
IKJointParameters_swigregister = _cmio.IKJointParameters_swigregister
IKJointParameters_swigregister(IKJointParameters)

class IKEndEffector(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IKEndEffector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffector
    __del__ = lambda self: None

    def get_index(self):
        return _cmio.IKEndEffector_get_index(self)

    def get_name(self):
        return _cmio.IKEndEffector_get_name(self)

    def append_ik_joint_index(self, index):
        return _cmio.IKEndEffector_append_ik_joint_index(self, index)

    def __copy__(self):
        return _cmio.IKEndEffector___copy__(self)

    def __deepcopy__(self):
        return _cmio.IKEndEffector___deepcopy__(self)

    def get_ik_joint_index_count(self):
        return _cmio.IKEndEffector_get_ik_joint_index_count(self)

    def _get_ik_joint_index(self, index):
        return _cmio.IKEndEffector__get_ik_joint_index(self, index)

    def get_ik_joint_index(self, index):
        return _cmio.IKEndEffector_get_ik_joint_index(self, index)

    def is_influenced_by(self, ik_joint_index):
        return _cmio.IKEndEffector_is_influenced_by(self, ik_joint_index)
IKEndEffector_swigregister = _cmio.IKEndEffector_swigregister
IKEndEffector_swigregister(IKEndEffector)

class IKJoint(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IKJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKJoint
    __del__ = lambda self: None

    def get_name(self):
        return _cmio.IKJoint_get_name(self)

    def _set_limit(self, parameter, lower_bound, upper_bound):
        return _cmio.IKJoint__set_limit(self, parameter, lower_bound, upper_bound)

    def set_limit(self, parameter, lower_bound, upper_bound):
        return _cmio.IKJoint_set_limit(self, parameter, lower_bound, upper_bound)

    def _get_lower_bound(self, parameter):
        return _cmio.IKJoint__get_lower_bound(self, parameter)

    def get_lower_bound(self, parameter):
        return _cmio.IKJoint_get_lower_bound(self, parameter)

    def _get_upper_bound(self, parameter):
        return _cmio.IKJoint__get_upper_bound(self, parameter)

    def get_upper_bound(self, parameter):
        return _cmio.IKJoint_get_upper_bound(self, parameter)

    def _enable_parameter(self, parameter):
        return _cmio.IKJoint__enable_parameter(self, parameter)

    def enable_parameter(self, parameter):
        return _cmio.IKJoint_enable_parameter(self, parameter)

    def _disable_parameter(self, parameter):
        return _cmio.IKJoint__disable_parameter(self, parameter)

    def disable_parameter(self, parameter):
        return _cmio.IKJoint_disable_parameter(self, parameter)

    def _is_parameter_enabled(self, parameter):
        return _cmio.IKJoint__is_parameter_enabled(self, parameter)

    def is_parameter_enabled(self, parameter):
        return _cmio.IKJoint_is_parameter_enabled(self, parameter)

    def get_index(self):
        return _cmio.IKJoint_get_index(self)

    def _get_parameter(self, parameter):
        return _cmio.IKJoint__get_parameter(self, parameter)

    def get_parameter(self, parameter):
        return _cmio.IKJoint_get_parameter(self, parameter)

    def _set_parameter(self, parameter, value):
        return _cmio.IKJoint__set_parameter(self, parameter, value)

    def set_parameter(self, parameter, value):
        return _cmio.IKJoint_set_parameter(self, parameter, value)

    def _get_stiffness(self, parameter):
        return _cmio.IKJoint__get_stiffness(self, parameter)

    def get_stiffness(self, parameter):
        return _cmio.IKJoint_get_stiffness(self, parameter)

    def _set_stiffness(self, parameter, value):
        return _cmio.IKJoint__set_stiffness(self, parameter, value)

    def set_stiffness(self, parameter, value):
        return _cmio.IKJoint_set_stiffness(self, parameter, value)

    def assign_joint_parameters(self, joint_parameters):
        return _cmio.IKJoint_assign_joint_parameters(self, joint_parameters)

    def set_according_to_joint_change(self, joint_change):
        return _cmio.IKJoint_set_according_to_joint_change(self, joint_change)

    def get_yaw_quaternion(self):
        return _cmio.IKJoint_get_yaw_quaternion(self)

    def get_pitch_quaternion(self):
        return _cmio.IKJoint_get_pitch_quaternion(self)

    def get_roll_quaternion(self):
        return _cmio.IKJoint_get_roll_quaternion(self)

    def get_rotation_axis_in_joint_space(self, parameter):
        return _cmio.IKJoint_get_rotation_axis_in_joint_space(self, parameter)

    def get_position_change(self):
        return _cmio.IKJoint_get_position_change(self)

    def get_orientation_change(self):
        return _cmio.IKJoint_get_orientation_change(self)

    def get_yaw(self):
        return _cmio.IKJoint_get_yaw(self)

    def get_pitch(self):
        return _cmio.IKJoint_get_pitch(self)

    def get_roll(self):
        return _cmio.IKJoint_get_roll(self)

    def rotate(self, *args):
        return _cmio.IKJoint_rotate(self, *args)

    def _clamp_parameter(self, parameter):
        return _cmio.IKJoint__clamp_parameter(self, parameter)

    def clamp_parameter(self, parameter):
        return _cmio.IKJoint_clamp_parameter(self, parameter)

    def clamp_all_parameters(self):
        return _cmio.IKJoint_clamp_all_parameters(self)

    def get_rotation_axis_to_joint_rotation(self):
        return _cmio.IKJoint_get_rotation_axis_to_joint_rotation(self)

    def set_rotation_to_axis_joint_rotation(self, quaternion):
        return _cmio.IKJoint_set_rotation_to_axis_joint_rotation(self, quaternion)

    def get_dof(self):
        return _cmio.IKJoint_get_dof(self)

    def get_joint_change(self):
        return _cmio.IKJoint_get_joint_change(self)

    def clear_parameters(self):
        return _cmio.IKJoint_clear_parameters(self)
IKJoint_swigregister = _cmio.IKJoint_swigregister
IKJoint_swigregister(IKJoint)

class NamePositionPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_NamePositionPair(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_name(self):
        return _cmio.NamePositionPair_get_name(self)

    def get_position(self):
        return _cmio.NamePositionPair_get_position(self)

    def set_position(self, position):
        return _cmio.NamePositionPair_set_position(self, position)
    __swig_destroy__ = _cmio.delete_NamePositionPair
    __del__ = lambda self: None
NamePositionPair_swigregister = _cmio.NamePositionPair_swigregister
NamePositionPair_swigregister(NamePositionPair)

class IKEndEffectorGoals(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_IKEndEffectorGoals()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffectorGoals
    __del__ = lambda self: None

    def set_end_effector_position(self, end_effector_name, position):
        return _cmio.IKEndEffectorGoals_set_end_effector_position(self, end_effector_name, position)

    def get_end_effector_position(self, end_effector_name):
        return _cmio.IKEndEffectorGoals_get_end_effector_position(self, end_effector_name)

    def get_designated_end_effector_count(self):
        return _cmio.IKEndEffectorGoals_get_designated_end_effector_count(self)

    def get_end_effector_position_iterator(self):
        return _cmio.IKEndEffectorGoals_get_end_effector_position_iterator(self)
IKEndEffectorGoals_swigregister = _cmio.IKEndEffectorGoals_swigregister
IKEndEffectorGoals_swigregister(IKEndEffectorGoals)

class IKEndEffectorPositionIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IKEndEffectorPositionIterator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffectorPositionIterator
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.IKEndEffectorPositionIterator_has_next(self)

    def get_next(self):
        return _cmio.IKEndEffectorPositionIterator_get_next(self)
    def __iter__(self):
    	return self

    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

IKEndEffectorPositionIterator_swigregister = _cmio.IKEndEffectorPositionIterator_swigregister
IKEndEffectorPositionIterator_swigregister(IKEndEffectorPositionIterator)

class IKPose(ReferenceCounted):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_IKPose()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKPose
    __del__ = lambda self: None

    def get_normal_pose(self):
        return _cmio.IKPose_get_normal_pose(self)

    def set_normal_pose(self, pose):
        return _cmio.IKPose_set_normal_pose(self, pose)

    def get_end_effector_goals(self):
        return _cmio.IKPose_get_end_effector_goals(self)

    def set_end_effector_goals(self, end_effector_goals):
        return _cmio.IKPose_set_end_effector_goals(self, end_effector_goals)
    def get_end_effector_indices_and_positions(self):
    	for i in xrange(self.get_designated_end_effector_count()):
    		index = self._get_end_effector_index_by_order(i)
    		position = self._get_end_effector_position_by_order(i)
    		yield (index, position)

IKPose_swigregister = _cmio.IKPose_swigregister
IKPose_swigregister(IKPose)


_cmio.DEFAULT_MAX_ITERATION_swigconstant(_cmio)
DEFAULT_MAX_ITERATION = _cmio.DEFAULT_MAX_ITERATION

_cmio.DEFAULT_ERROR_THRESHOLD_swigconstant(_cmio)
DEFAULT_ERROR_THRESHOLD = _cmio.DEFAULT_ERROR_THRESHOLD
class IKArmature(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IKArmature(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKArmature
    __del__ = lambda self: None

    def get_end_effector_count(self):
        return _cmio.IKArmature_get_end_effector_count(self)

    def get_end_effector(self, *args):
        return _cmio.IKArmature_get_end_effector(self, *args)

    def make_end_effector(self, *args):
        return _cmio.IKArmature_make_end_effector(self, *args)

    def get_end_effector_iterator(self):
        return _cmio.IKArmature_get_end_effector_iterator(self)

    def add_ik_joint_to_end_effector(self, *args):
        return _cmio.IKArmature_add_ik_joint_to_end_effector(self, *args)

    def get_ik_joint_count(self):
        return _cmio.IKArmature_get_ik_joint_count(self)

    def get_ik_joint(self, *args):
        return _cmio.IKArmature_get_ik_joint(self, *args)

    def make_ik_joint(self, *args):
        return _cmio.IKArmature_make_ik_joint(self, *args)

    def get_ik_joint_iterator(self):
        return _cmio.IKArmature_get_ik_joint_iterator(self)

    def get_morphed_armature(self):
        return _cmio.IKArmature_get_morphed_armature(self)

    def get_rest_armature(self):
        return _cmio.IKArmature_get_rest_armature(self)

    def solve(self, *args):
        return _cmio.IKArmature_solve(self, *args)

    def solve_for_pose(self, result_pose, pose, max_iteration=20, error_threshold=0.0001):
        return _cmio.IKArmature_solve_for_pose(self, result_pose, pose, max_iteration, error_threshold)
    def get_ik_joints(self):
    	return self.get_ik_joint_iterator()
    	
    def get_end_effectors(self):
    	return self.get_end_effector_iterator()

IKArmature_swigregister = _cmio.IKArmature_swigregister
IKArmature_swigregister(IKArmature)

class IKEndEffectorIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IKEndEffectorIterator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffectorIterator
    __del__ = lambda self: None

    def get_next(self):
        return _cmio.IKEndEffectorIterator_get_next(self)

    def has_next(self):
        return _cmio.IKEndEffectorIterator_has_next(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

IKEndEffectorIterator_swigregister = _cmio.IKEndEffectorIterator_swigregister
IKEndEffectorIterator_swigregister(IKEndEffectorIterator)

class IKJointIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IKJointIterator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IKJointIterator
    __del__ = lambda self: None

    def get_next(self):
        return _cmio.IKJointIterator_get_next(self)

    def has_next(self):
        return _cmio.IKJointIterator_has_next(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

IKJointIterator_swigregister = _cmio.IKJointIterator_swigregister
IKJointIterator_swigregister(IKJointIterator)

class JointWeightMapping(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_JointWeightMapping
    __del__ = lambda self: None

    def get_vertex_count(self):
        return _cmio.JointWeightMapping_get_vertex_count(self)

    def get_influencing_joint_count(self, vertex_index):
        return _cmio.JointWeightMapping_get_influencing_joint_count(self, vertex_index)

    def get_influencing_joint_index(self, vertex_index, joint_order):
        return _cmio.JointWeightMapping_get_influencing_joint_index(self, vertex_index, joint_order)

    def get_influencing_joint_weight(self, vertex_index, joint_order):
        return _cmio.JointWeightMapping_get_influencing_joint_weight(self, vertex_index, joint_order)
JointWeightMapping_swigregister = _cmio.JointWeightMapping_swigregister
JointWeightMapping_swigregister(JointWeightMapping)

class IndexedJointWeightMapping(JointWeightMapping):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_IndexedJointWeightMapping(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_IndexedJointWeightMapping
    __del__ = lambda self: None

    def get_vertex_count(self):
        return _cmio.IndexedJointWeightMapping_get_vertex_count(self)

    def append_new_vertex(self):
        return _cmio.IndexedJointWeightMapping_append_new_vertex(self)

    def _append_joint_weight(self, joint_index, weight):
        return _cmio.IndexedJointWeightMapping__append_joint_weight(self, joint_index, weight)

    def append_joint_weight(self, joint_index, weight):
        return _cmio.IndexedJointWeightMapping_append_joint_weight(self, joint_index, weight)

    def _get_influencing_joint_count(self, vertex_index):
        return _cmio.IndexedJointWeightMapping__get_influencing_joint_count(self, vertex_index)

    def get_influencing_joint_count(self, vertex_index):
        return _cmio.IndexedJointWeightMapping_get_influencing_joint_count(self, vertex_index)

    def _get_influencing_joint_index(self, vertex_index, joint_order):
        return _cmio.IndexedJointWeightMapping__get_influencing_joint_index(self, vertex_index, joint_order)

    def get_influencing_joint_index(self, vertex_index, joint_order):
        return _cmio.IndexedJointWeightMapping_get_influencing_joint_index(self, vertex_index, joint_order)

    def _get_influencing_joint_weight(self, vertex_index, joint_order):
        return _cmio.IndexedJointWeightMapping__get_influencing_joint_weight(self, vertex_index, joint_order)

    def get_influencing_joint_weight(self, vertex_index, joint_order):
        return _cmio.IndexedJointWeightMapping_get_influencing_joint_weight(self, vertex_index, joint_order)
IndexedJointWeightMapping_swigregister = _cmio.IndexedJointWeightMapping_swigregister
IndexedJointWeightMapping_swigregister(IndexedJointWeightMapping)

class Curve_float(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_float
    __del__ = lambda self: None

    def evaluate(self, time):
        return _cmio.Curve_float_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Curve_float_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Curve_float_get_range_upper_bound(self)

    def __call__(self, time):
        return _cmio.Curve_float___call__(self, time)
Curve_float_swigregister = _cmio.Curve_float_swigregister
Curve_float_swigregister(Curve_float)

class Curve_Vector3(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_Vector3
    __del__ = lambda self: None

    def evaluate(self, time):
        return _cmio.Curve_Vector3_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Curve_Vector3_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Curve_Vector3_get_range_upper_bound(self)

    def __call__(self, time):
        return _cmio.Curve_Vector3___call__(self, time)
Curve_Vector3_swigregister = _cmio.Curve_Vector3_swigregister
Curve_Vector3_swigregister(Curve_Vector3)

class Curve_Quaternion(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_Quaternion
    __del__ = lambda self: None

    def evaluate(self, time):
        return _cmio.Curve_Quaternion_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Curve_Quaternion_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Curve_Quaternion_get_range_upper_bound(self)

    def __call__(self, time):
        return _cmio.Curve_Quaternion___call__(self, time)
Curve_Quaternion_swigregister = _cmio.Curve_Quaternion_swigregister
Curve_Quaternion_swigregister(Curve_Quaternion)

class Curve_JointChange(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_JointChange
    __del__ = lambda self: None

    def evaluate(self, time):
        return _cmio.Curve_JointChange_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Curve_JointChange_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Curve_JointChange_get_range_upper_bound(self)

    def __call__(self, time):
        return _cmio.Curve_JointChange___call__(self, time)
Curve_JointChange_swigregister = _cmio.Curve_JointChange_swigregister
Curve_JointChange_swigregister(Curve_JointChange)

class Polyline_float(Curve_float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Polyline_float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_float
    __del__ = lambda self: None

    def zero(self):
        return _cmio.Polyline_float_zero(self)

    def interpolate(self, a, b, x):
        return _cmio.Polyline_float_interpolate(self, a, b, x)

    def evaluate(self, time):
        return _cmio.Polyline_float_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Polyline_float_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Polyline_float_get_range_upper_bound(self)

    def get_control_point_count(self):
        return _cmio.Polyline_float_get_control_point_count(self)

    def set_control_point(self, time, value):
        return _cmio.Polyline_float_set_control_point(self, time, value)

    def get_control_point_iterator(self):
        return _cmio.Polyline_float_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_float_swigregister = _cmio.Polyline_float_swigregister
Polyline_float_swigregister(Polyline_float)

class PolylineControlPoint_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    time = _swig_property(_cmio.PolylineControlPoint_float_time_get, _cmio.PolylineControlPoint_float_time_set)
    value = _swig_property(_cmio.PolylineControlPoint_float_value_get, _cmio.PolylineControlPoint_float_value_set)

    def __init__(self, _time, _value):
        this = _cmio.new_PolylineControlPoint_float(_time, _value)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_float
    __del__ = lambda self: None
PolylineControlPoint_float_swigregister = _cmio.PolylineControlPoint_float_swigregister
PolylineControlPoint_float_swigregister(PolylineControlPoint_float)

class PolylineControlPointIterator_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_PolylineControlPointIterator_float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_float
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.PolylineControlPointIterator_float_has_next(self)

    def get_next(self):
        return _cmio.PolylineControlPointIterator_float_get_next(self)

    def peek(self):
        return _cmio.PolylineControlPointIterator_float_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_float_swigregister = _cmio.PolylineControlPointIterator_float_swigregister
PolylineControlPointIterator_float_swigregister(PolylineControlPointIterator_float)

class Polyline_Vector3(Curve_Vector3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Polyline_Vector3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_Vector3
    __del__ = lambda self: None

    def zero(self):
        return _cmio.Polyline_Vector3_zero(self)

    def interpolate(self, a, b, x):
        return _cmio.Polyline_Vector3_interpolate(self, a, b, x)

    def evaluate(self, time):
        return _cmio.Polyline_Vector3_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Polyline_Vector3_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Polyline_Vector3_get_range_upper_bound(self)

    def get_control_point_count(self):
        return _cmio.Polyline_Vector3_get_control_point_count(self)

    def set_control_point(self, time, value):
        return _cmio.Polyline_Vector3_set_control_point(self, time, value)

    def get_control_point_iterator(self):
        return _cmio.Polyline_Vector3_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_Vector3_swigregister = _cmio.Polyline_Vector3_swigregister
Polyline_Vector3_swigregister(Polyline_Vector3)

class PolylineControlPoint_Vector3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    time = _swig_property(_cmio.PolylineControlPoint_Vector3_time_get, _cmio.PolylineControlPoint_Vector3_time_set)
    value = _swig_property(_cmio.PolylineControlPoint_Vector3_value_get, _cmio.PolylineControlPoint_Vector3_value_set)

    def __init__(self, _time, _value):
        this = _cmio.new_PolylineControlPoint_Vector3(_time, _value)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_Vector3
    __del__ = lambda self: None
PolylineControlPoint_Vector3_swigregister = _cmio.PolylineControlPoint_Vector3_swigregister
PolylineControlPoint_Vector3_swigregister(PolylineControlPoint_Vector3)

class PolylineControlPointIterator_Vector3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_PolylineControlPointIterator_Vector3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_Vector3
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.PolylineControlPointIterator_Vector3_has_next(self)

    def get_next(self):
        return _cmio.PolylineControlPointIterator_Vector3_get_next(self)

    def peek(self):
        return _cmio.PolylineControlPointIterator_Vector3_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_Vector3_swigregister = _cmio.PolylineControlPointIterator_Vector3_swigregister
PolylineControlPointIterator_Vector3_swigregister(PolylineControlPointIterator_Vector3)

class Polyline_Quaternion(Curve_Quaternion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Polyline_Quaternion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_Quaternion
    __del__ = lambda self: None

    def zero(self):
        return _cmio.Polyline_Quaternion_zero(self)

    def interpolate(self, a, b, x):
        return _cmio.Polyline_Quaternion_interpolate(self, a, b, x)

    def evaluate(self, time):
        return _cmio.Polyline_Quaternion_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Polyline_Quaternion_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Polyline_Quaternion_get_range_upper_bound(self)

    def get_control_point_count(self):
        return _cmio.Polyline_Quaternion_get_control_point_count(self)

    def set_control_point(self, time, value):
        return _cmio.Polyline_Quaternion_set_control_point(self, time, value)

    def get_control_point_iterator(self):
        return _cmio.Polyline_Quaternion_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_Quaternion_swigregister = _cmio.Polyline_Quaternion_swigregister
Polyline_Quaternion_swigregister(Polyline_Quaternion)

class PolylineControlPoint_Quaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    time = _swig_property(_cmio.PolylineControlPoint_Quaternion_time_get, _cmio.PolylineControlPoint_Quaternion_time_set)
    value = _swig_property(_cmio.PolylineControlPoint_Quaternion_value_get, _cmio.PolylineControlPoint_Quaternion_value_set)

    def __init__(self, _time, _value):
        this = _cmio.new_PolylineControlPoint_Quaternion(_time, _value)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_Quaternion
    __del__ = lambda self: None
PolylineControlPoint_Quaternion_swigregister = _cmio.PolylineControlPoint_Quaternion_swigregister
PolylineControlPoint_Quaternion_swigregister(PolylineControlPoint_Quaternion)

class PolylineControlPointIterator_Quaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_PolylineControlPointIterator_Quaternion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_Quaternion
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.PolylineControlPointIterator_Quaternion_has_next(self)

    def get_next(self):
        return _cmio.PolylineControlPointIterator_Quaternion_get_next(self)

    def peek(self):
        return _cmio.PolylineControlPointIterator_Quaternion_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_Quaternion_swigregister = _cmio.PolylineControlPointIterator_Quaternion_swigregister
PolylineControlPointIterator_Quaternion_swigregister(PolylineControlPointIterator_Quaternion)

class Polyline_JointChange(Curve_JointChange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Polyline_JointChange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_JointChange
    __del__ = lambda self: None

    def zero(self):
        return _cmio.Polyline_JointChange_zero(self)

    def interpolate(self, a, b, x):
        return _cmio.Polyline_JointChange_interpolate(self, a, b, x)

    def evaluate(self, time):
        return _cmio.Polyline_JointChange_evaluate(self, time)

    def get_range_lower_bound(self):
        return _cmio.Polyline_JointChange_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.Polyline_JointChange_get_range_upper_bound(self)

    def get_control_point_count(self):
        return _cmio.Polyline_JointChange_get_control_point_count(self)

    def set_control_point(self, time, value):
        return _cmio.Polyline_JointChange_set_control_point(self, time, value)

    def get_control_point_iterator(self):
        return _cmio.Polyline_JointChange_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_JointChange_swigregister = _cmio.Polyline_JointChange_swigregister
Polyline_JointChange_swigregister(Polyline_JointChange)

class PolylineControlPoint_JointChange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    time = _swig_property(_cmio.PolylineControlPoint_JointChange_time_get, _cmio.PolylineControlPoint_JointChange_time_set)
    value = _swig_property(_cmio.PolylineControlPoint_JointChange_value_get, _cmio.PolylineControlPoint_JointChange_value_set)

    def __init__(self, _time, _value):
        this = _cmio.new_PolylineControlPoint_JointChange(_time, _value)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_JointChange
    __del__ = lambda self: None
PolylineControlPoint_JointChange_swigregister = _cmio.PolylineControlPoint_JointChange_swigregister
PolylineControlPoint_JointChange_swigregister(PolylineControlPoint_JointChange)

class PolylineControlPointIterator_JointChange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_PolylineControlPointIterator_JointChange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_JointChange
    __del__ = lambda self: None

    def has_next(self):
        return _cmio.PolylineControlPointIterator_JointChange_has_next(self)

    def get_next(self):
        return _cmio.PolylineControlPointIterator_JointChange_get_next(self)

    def peek(self):
        return _cmio.PolylineControlPointIterator_JointChange_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_JointChange_swigregister = _cmio.PolylineControlPointIterator_JointChange_swigregister
PolylineControlPointIterator_JointChange_swigregister(PolylineControlPointIterator_JointChange)

class PoseAnimation(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_PoseAnimation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_PoseAnimation
    __del__ = lambda self: None

    def get_joint_curve(self, joint_name):
        return _cmio.PoseAnimation_get_joint_curve(self, joint_name)

    def set_joint_curve(self, joint_name, joint_curve):
        return _cmio.PoseAnimation_set_joint_curve(self, joint_name, joint_curve)

    def get_pose(self, *args):
        return _cmio.PoseAnimation_get_pose(self, *args)

    def update_range(self):
        return _cmio.PoseAnimation_update_range(self)

    def get_range_lower_bound(self):
        return _cmio.PoseAnimation_get_range_lower_bound(self)

    def get_range_upper_bound(self):
        return _cmio.PoseAnimation_get_range_upper_bound(self)
PoseAnimation_swigregister = _cmio.PoseAnimation_swigregister
PoseAnimation_swigregister(PoseAnimation)

class Node(MioObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Node(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def accept(self, visitor):
        return _cmio.Node_accept(self, visitor)
    __swig_destroy__ = _cmio.delete_Node
    __del__ = lambda self: None
Node_swigregister = _cmio.Node_swigregister
Node_swigregister(Node)

class TransformNode(Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_TransformNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_TransformNode
    __del__ = lambda self: None

    def get_child(self):
        return _cmio.TransformNode_get_child(self)

    def set_child(self, child):
        return _cmio.TransformNode_set_child(self, child)

    def get_transform(self):
        return _cmio.TransformNode_get_transform(self)

    def set_transform(self, transform):
        return _cmio.TransformNode_set_transform(self, transform)

    def accept(self, visitor):
        return _cmio.TransformNode_accept(self, visitor)
TransformNode_swigregister = _cmio.TransformNode_swigregister
TransformNode_swigregister(TransformNode)

class Group(Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_Group(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_Group
    __del__ = lambda self: None

    def append_child(self, node):
        return _cmio.Group_append_child(self, node)

    def _get_child(self, index):
        return _cmio.Group__get_child(self, index)

    def get_child(self, index):
        return _cmio.Group_get_child(self, index)

    def get_children_count(self):
        return _cmio.Group_get_children_count(self)

    def accept(self, visitor):
        return _cmio.Group_accept(self, visitor)
    def children(self):
    	for i in xrange(self.get_children_count()):
    		yield self.get_child(i)

Group_swigregister = _cmio.Group_swigregister
Group_swigregister(Group)

class SimplePrimitive(Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_SimplePrimitive(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_SimplePrimitive
    __del__ = lambda self: None

    def get_mesh(self):
        return _cmio.SimplePrimitive_get_mesh(self)

    def set_mesh(self, mesh):
        return _cmio.SimplePrimitive_set_mesh(self, mesh)

    def get_material_mapping(self):
        return _cmio.SimplePrimitive_get_material_mapping(self)

    def set_material_mapping(self, material_mapping):
        return _cmio.SimplePrimitive_set_material_mapping(self, material_mapping)

    def get_texture_mapping(self):
        return _cmio.SimplePrimitive_get_texture_mapping(self)

    def set_texture_mapping(self, texture_mapping):
        return _cmio.SimplePrimitive_set_texture_mapping(self, texture_mapping)

    def get_material_list(self):
        return _cmio.SimplePrimitive_get_material_list(self)

    def set_material_list(self, material_list):
        return _cmio.SimplePrimitive_set_material_list(self, material_list)

    def accept(self, visitor):
        return _cmio.SimplePrimitive_accept(self, visitor)
SimplePrimitive_swigregister = _cmio.SimplePrimitive_swigregister
SimplePrimitive_swigregister(SimplePrimitive)

class RiggedPrimitive(Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cmio.new_RiggedPrimitive(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_RiggedPrimitive
    __del__ = lambda self: None

    def get_morphed_primitive(self):
        return _cmio.RiggedPrimitive_get_morphed_primitive(self)

    def get_rest_mesh(self):
        return _cmio.RiggedPrimitive_get_rest_mesh(self)

    def get_moprhed_mesh(self):
        return _cmio.RiggedPrimitive_get_moprhed_mesh(self)

    def get_texture_mapping(self):
        return _cmio.RiggedPrimitive_get_texture_mapping(self)

    def get_material_mapping(self):
        return _cmio.RiggedPrimitive_get_material_mapping(self)

    def get_material_list(self):
        return _cmio.RiggedPrimitive_get_material_list(self)

    def get_rest_armature(self):
        return _cmio.RiggedPrimitive_get_rest_armature(self)

    def get_morphed_armature(self):
        return _cmio.RiggedPrimitive_get_morphed_armature(self)

    def get_joint_weight_mapping(self):
        return _cmio.RiggedPrimitive_get_joint_weight_mapping(self)

    def update_rest_joint_transforms(self):
        return _cmio.RiggedPrimitive_update_rest_joint_transforms(self)

    def update_morphed_joint_transforms(self):
        return _cmio.RiggedPrimitive_update_morphed_joint_transforms(self)

    def morph(self, pose):
        return _cmio.RiggedPrimitive_morph(self, pose)

    def accept(self, visitor):
        return _cmio.RiggedPrimitive_accept(self, visitor)
RiggedPrimitive_swigregister = _cmio.RiggedPrimitive_swigregister
RiggedPrimitive_swigregister(RiggedPrimitive)

class MeshVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MeshVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_MeshVisitor(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_MeshVisitor
    __del__ = lambda self: None

    def visit_IndexedMesh(self, mesh):
        return _cmio.MeshVisitor_visit_IndexedMesh(self, mesh)
    def __disown__(self):
        self.this.disown()
        _cmio.disown_MeshVisitor(self)
        return weakref_proxy(self)
MeshVisitor_swigregister = _cmio.MeshVisitor_swigregister
MeshVisitor_swigregister(MeshVisitor)

class MaterialVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_MaterialVisitor
    __del__ = lambda self: None

    def visit_PhongMaterial(self, material):
        return _cmio.MaterialVisitor_visit_PhongMaterial(self, material)

    def visit_TexturedPhongMaterial(self, material):
        return _cmio.MaterialVisitor_visit_TexturedPhongMaterial(self, material)

    def visit_MqoMaterial(self, material):
        return _cmio.MaterialVisitor_visit_MqoMaterial(self, material)

    def visit_TexturedMqoMaterial(self, material):
        return _cmio.MaterialVisitor_visit_TexturedMqoMaterial(self, material)

    def __init__(self):
        if self.__class__ == MaterialVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_MaterialVisitor(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _cmio.disown_MaterialVisitor(self)
        return weakref_proxy(self)
MaterialVisitor_swigregister = _cmio.MaterialVisitor_swigregister
MaterialVisitor_swigregister(MaterialVisitor)

class MaterialMappingVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_MaterialMappingVisitor
    __del__ = lambda self: None

    def visit_ByPolygonMaterialMapping(self, mapping):
        return _cmio.MaterialMappingVisitor_visit_ByPolygonMaterialMapping(self, mapping)

    def __init__(self):
        if self.__class__ == MaterialMappingVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_MaterialMappingVisitor(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _cmio.disown_MaterialMappingVisitor(self)
        return weakref_proxy(self)
MaterialMappingVisitor_swigregister = _cmio.MaterialMappingVisitor_swigregister
MaterialMappingVisitor_swigregister(MaterialMappingVisitor)

class TextureVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TextureVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_TextureVisitor(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_TextureVisitor
    __del__ = lambda self: None

    def visit_ILTexture(self, texture):
        return _cmio.TextureVisitor_visit_ILTexture(self, texture)

    def visit_LazyILTexture(self, texture):
        return _cmio.TextureVisitor_visit_LazyILTexture(self, texture)
    def __disown__(self):
        self.this.disown()
        _cmio.disown_TextureVisitor(self)
        return weakref_proxy(self)
TextureVisitor_swigregister = _cmio.TextureVisitor_swigregister
TextureVisitor_swigregister(TextureVisitor)

class TextureMappingVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TextureMappingVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_TextureMappingVisitor(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_TextureMappingVisitor
    __del__ = lambda self: None

    def visit_IndexedTextureMapping(self, mapping):
        return _cmio.TextureMappingVisitor_visit_IndexedTextureMapping(self, mapping)
    def __disown__(self):
        self.this.disown()
        _cmio.disown_TextureMappingVisitor(self)
        return weakref_proxy(self)
TextureMappingVisitor_swigregister = _cmio.TextureMappingVisitor_swigregister
TextureMappingVisitor_swigregister(TextureMappingVisitor)

class NodeVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_NodeVisitor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_NodeVisitor
    __del__ = lambda self: None

    def visit_SimplePrimitive(self, primitive):
        return _cmio.NodeVisitor_visit_SimplePrimitive(self, primitive)

    def visit_Group(self, group):
        return _cmio.NodeVisitor_visit_Group(self, group)

    def visit_TransformNode(self, transformNode):
        return _cmio.NodeVisitor_visit_TransformNode(self, transformNode)

    def visit_RiggedPrimitive(self, primitive):
        return _cmio.NodeVisitor_visit_RiggedPrimitive(self, primitive)
NodeVisitor_swigregister = _cmio.NodeVisitor_swigregister
NodeVisitor_swigregister(NodeVisitor)

class OmniVisitor(NodeVisitor, MaterialVisitor, MaterialMappingVisitor, TextureVisitor, TextureMappingVisitor, MeshVisitor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == OmniVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_OmniVisitor(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_OmniVisitor
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _cmio.disown_OmniVisitor(self)
        return weakref_proxy(self)
OmniVisitor_swigregister = _cmio.OmniVisitor_swigregister
OmniVisitor_swigregister(OmniVisitor)

class GLRenderer(NodeVisitor, MaterialVisitor, TextureVisitor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _cmio.new_GLRenderer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cmio.delete_GLRenderer
    __del__ = lambda self: None

    def visit_SimplePrimitive(self, primitive):
        return _cmio.GLRenderer_visit_SimplePrimitive(self, primitive)

    def visit_Group(self, group):
        return _cmio.GLRenderer_visit_Group(self, group)

    def visit_TransformNode(self, transformNode):
        return _cmio.GLRenderer_visit_TransformNode(self, transformNode)

    def visit_RiggedPrimitive(self, primitive):
        return _cmio.GLRenderer_visit_RiggedPrimitive(self, primitive)

    def visit_PhongMaterial(self, material):
        return _cmio.GLRenderer_visit_PhongMaterial(self, material)

    def visit_TexturedPhongMaterial(self, material):
        return _cmio.GLRenderer_visit_TexturedPhongMaterial(self, material)

    def visit_MqoMaterial(self, material):
        return _cmio.GLRenderer_visit_MqoMaterial(self, material)

    def visit_TexturedMqoMaterial(self, material):
        return _cmio.GLRenderer_visit_TexturedMqoMaterial(self, material)

    def visit_ILTexture(self, texture):
        return _cmio.GLRenderer_visit_ILTexture(self, texture)

    def visit_LazyILTexture(self, texture):
        return _cmio.GLRenderer_visit_LazyILTexture(self, texture)

    def reset_state(self):
        return _cmio.GLRenderer_reset_state(self)

    def set_draw_normals(self, drawNormals):
        return _cmio.GLRenderer_set_draw_normals(self, drawNormals)

    def set_draw_wireframes(self, drawWireframe):
        return _cmio.GLRenderer_set_draw_wireframes(self, drawWireframe)

    def set_draw_surface(self, drawSurface):
        return _cmio.GLRenderer_set_draw_surface(self, drawSurface)
GLRenderer_swigregister = _cmio.GLRenderer_swigregister
GLRenderer_swigregister(GLRenderer)



